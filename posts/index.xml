<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - Kilien's Blog</title><link>http://KiLien.github.io/posts/</link><description>所有文章 | Kilien's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ki.lien@foxmail.com (Kilien)</managingEditor><webMaster>ki.lien@foxmail.com (Kilien)</webMaster><lastBuildDate>Sat, 03 Apr 2021 19:48:00 +0800</lastBuildDate><atom:link href="http://KiLien.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>GitHub-profile-README：打造自己的个人主页</title><link>http://KiLien.github.io/github-profile-readme/</link><pubDate>Sat, 03 Apr 2021 19:48:00 +0800</pubDate><author>作者</author><guid>http://KiLien.github.io/github-profile-readme/</guid><description>GitHub Profile README 介绍 最近，GitHub 上线了一个全新的个人页功能，可以显示一个自定义的 README.MD 在个人主页。 效果如下： 要激活此功能，需要新建一个与自己 ID 同名的</description></item><item><title>PicGo+GitHub：打造自己的图床</title><link>http://KiLien.github.io/githubPhotoBed/</link><pubDate>Fri, 02 Apr 2021 23:06:22 +0800</pubDate><author>作者</author><guid>http://KiLien.github.io/githubPhotoBed/</guid><description>PicGo 介绍 这是一款图片上传的工具，目前支持 SM.MS 图床，微博图床，七牛图床，腾讯云 COS，阿里云 OSS，Imgur，又拍云，GitHub等图床，未来将</description></item><item><title>LeetCode-160-相交链表</title><link>http://KiLien.github.io/LeetCode-160%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</link><pubDate>Tue, 10 Nov 2020 11:06:17 +0800</pubDate><author>作者</author><guid>http://KiLien.github.io/LeetCode-160%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</guid><description>LeetCode-160相交链表 编写一个程序，找到两个单链表相交的起始节点。 如下面的两个链表**：** 相交链表" 相交链表 在节点 c1 开始相交。 示</description></item><item><title>Python技巧2</title><link>http://KiLien.github.io/PythonTrick2/</link><pubDate>Mon, 09 Nov 2020 11:06:17 +0800</pubDate><author>作者</author><guid>http://KiLien.github.io/PythonTrick2/</guid><description>35个高级Python知识点总结 No.1 一切皆对象 众所周知，Java中强调“一切皆对象”，但是Python中的面向对象比Java更加彻底，因为Py</description></item><item><title>LeetCode-821-字符的最短距离</title><link>http://KiLien.github.io/LeetCode-821-%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/</link><pubDate>Mon, 02 Nov 2020 11:06:17 +0800</pubDate><author>作者</author><guid>http://KiLien.github.io/LeetCode-821-%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/</guid><description>LeetCode-821-字符的最短距离 题目 给定一个字符串 S 和一个字符 C。返回一个代表字符串 S 中每个字符到字符串 S 中的字符 C 的最短距离的数组</description></item><item><title>LeetCode-66-加一</title><link>http://KiLien.github.io/LeetCode-66-%E5%8A%A0%E4%B8%80/</link><pubDate>Sun, 01 Nov 2020 11:06:17 +0800</pubDate><author>作者</author><guid>http://KiLien.github.io/LeetCode-66-%E5%8A%A0%E4%B8%80/</guid><description>LeetCode-66 加一 题目 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以</description></item><item><title>Python技巧</title><link>http://KiLien.github.io/PythonTrick/</link><pubDate>Fri, 09 Oct 2020 11:06:17 +0800</pubDate><author>作者</author><guid>http://KiLien.github.io/PythonTrick/</guid><description><![CDATA[Python技巧 原地交换两数 1 2 3 4 5 a = 10 b = 20 a, b = b, a print(b, a) print(a, b) 输出: 1 2 10 20 20 10 链式比较 1 2 3 n = 10 print(6 &lt; n &lt; 20) print(11 &lt; n &lt; 20) 输出: 1 2 True False]]></description></item><item><title>Iterm2 环境配置</title><link>http://KiLien.github.io/Iterm2EnvironmentConfiguration/</link><pubDate>Tue, 21 Jul 2020 11:06:17 +0800</pubDate><author>作者</author><guid>http://KiLien.github.io/Iterm2EnvironmentConfiguration/</guid><description>iTerm2 + Oh My Zsh 环境配置 因为powerline以及homebrew均需要安装command line tool，网络条件优越的同学在执行本文下面内容之前，可</description></item><item><title>生成器的运用</title><link>http://KiLien.github.io/GeneratorAndYield/</link><pubDate>Thu, 25 Jun 2020 11:06:17 +0800</pubDate><author>作者</author><guid>http://KiLien.github.io/GeneratorAndYield/</guid><description>python 生成器和迭代器 PS：这篇博客是我上网课做的笔记，也是参考网课老师的博客，就是学习笔记而已，不喜勿喷！ 本节主要记录一下列表生成式，生成器和迭</description></item><item><title>单例模式实现</title><link>http://KiLien.github.io/singleton/</link><pubDate>Mon, 25 May 2020 11:06:17 +0800</pubDate><author>作者</author><guid>http://KiLien.github.io/singleton/</guid><description>Python单例模式(Singleton)的N种实现 很多初学者喜欢用 全局变量 ，因为这比函数的参数传来传去更容易让人理解。确实在很多场景下用全</description></item></channel></rss>